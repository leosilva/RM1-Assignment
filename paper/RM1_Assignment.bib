Automatically generated by Mendeley Desktop 1.19.4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@article{Prajapati2017,
author = {Prajapati, Purvi and Bhatt, Nikita and Bhatt, Nirav},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/Performance{\_}Comparison{\_}of{\_}Different{\_}Sort.pdf:pdf},
keywords = {algorithm,space complexity,time complexity},
number = {Vi},
pages = {39--41},
title = {{Performance Comparison of Different Sorting Algorithms}},
volume = {VI},
year = {2017}
}
@book{Cormen2009,
abstract = {Introduction to Algorithms, the 'bible' of the field, is a comprehensive textbook covering the full spectrum of modern algorithms: from the fastest algorithms and data structures to polynomial-time algorithms for seemingly intractable problems, from classical algorithms in graph theory to special algorithms for string matching, computational geometry, and number theory. The revised third edition notably adds a chapter on van Emde Boas trees, one of the most useful data structures, and on multithreaded algorithms, a topic of increasing importance.},
author = {Cormen, TH and Leiserson, CE and Rivest, RL and Stein, C},
booktitle = {Poss{\'{i}}veis Questionamentos},
editor = {{MIT Press}},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/cormem.pdf:pdf},
isbn = {978-0-262-03384-8},
pages = {1292},
publisher = {MIT Press},
title = {{Introduction to algorithms.}},
url = {http://scholar.google.es/scholar?q=introduction+to+algorithms+2009{\&}btnG={\&}hl=es{\&}as{\_}sdt=0{\%}2C5{\#}0},
year = {2009}
}
@inproceedings{Finocchi2004,
abstract = {This article proposes a taxonomy of model transformation, based on the discussions of a working group on model transformation of the Dagstuhl seminar on Language Engineering for Model-Driven Software Development. This taxonomy can be used, among others, to help developers in deciding which model transformation language or tool is best suited to carry out a particular model transformation activity.},
author = {Finocchi, Irene and Italiano, Giuseppe F},
booktitle = {Conference Proceedings of the Annual ACM Symposium on Theory of Computing},
doi = {10.1145/1007352.1007375},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/Sorting{\_}and{\_}searching{\_}in{\_}the{\_}presence{\_}of{\_}memory{\_}fa.pdf:pdf},
isbn = {1581138520},
issn = {07349025},
keywords = {Combinatorial algorithms,Memory faults,Memory models,Searching,Sorting},
number = {January},
pages = {101--110},
title = {{Sorting and searching in the presence of memory faults (without redundancy)}},
year = {2004}
}
@article{Mansotra2011,
author = {{Mansotra, V; Sourabh}, Kr},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/86.pdf:pdf},
isbn = {9789380544007},
pages = {1--6},
title = {{Implementing Bubble Sort Using a New Approach}},
year = {2011}
}
@article{Abhyankar2011,
author = {Abhyankar, D and Ingle, M},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/1208.0146v1.pdf:pdf},
number = {3},
pages = {17--22},
title = {{A Novel Mergesort}},
volume = {1},
year = {2011}
}
@article{Hoare1962,
author = {{C. A. R. Hoare}},
journal = {The Computer Journal},
number = {1},
pages = {10--16},
title = {{Quicksort}},
volume = {5},
year = {1962}
}
@article{Nelson1990,
author = {Nelson, Victor P},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/00056849.pdf:pdf},
journal = {Computer},
number = {7},
pages = {19--25},
title = {{Fault-Tolerant Computing: Fundamental Concepts}},
volume = {23},
year = {1990}
}
@article{NitinArora,
abstract = {Sort is an algorithm that arranges all elements of an array, orderly. Sorting Technique is frequently used in a large variety of important applications to arrange the data in ascending or descending order. Several Sorting Algorithms of different time and space complexity are exist and used. This paper provides a novel sorting algorithm Counting Position sort which is based on counting the position of each element in array. We also compare Counting Position algorithm with Bubble sort and Selection sort. We have used the MATLAB for implementation and Analysis of CPU time taken for all the three sorting algorithms used. We have checked the algorithms with random input sequence of length 10, 100, 1000, 10000, 50000. Result shows that for the small length of input sequence the performance all the three techniques is all most same, but for the large input sequence Selection sort is faster than Bubble sort and Counting Position sort.},
author = {NitinArora and Kumar, Suresh},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/10.1.1.676.7989.pdf:pdf},
isbn = {0975 â€“ 8887},
journal = {International Journal of Computer Applications},
keywords = {A,H3},
number = {1},
pages = {2},
title = {{A Novel Sorting Algorithm and Comparison with Bubble sort and Insertion sort}},
volume = {45}
}
@article{Goswami1993,
author = {Goswami, Kumar K. and Iyer, Ravishankar K.},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/00627325.pdf:pdf},
isbn = {0818636823},
issn = {07313071},
journal = {Digest of Papers - International Symposium on Fault-Tolerant Computing},
pages = {218--227},
title = {{Simulation of software behavior under hardware faults}},
year = {1993}
}
@article{Wang2011,
abstract = {Quick sort algorithm has been widely used in data processing systems, because of its high efficiency, fast speed, scientific structure. Therefore, thorough study based on time complexity of quick sort algorithm is of great significance. Especially on time complexity aspect, the comparison of quick sort algorithm and other algorithm is particularly important. This paper talks about time complexity of quick sort algorithm and makes a comparison between the improved bubble sort and quick sort through analyzing the first order derivative of the function that is founded to correlate quick sort with other sorting algorithm. The comparison can promote programmers make the right decision when they face the choice of sort algorithms in a variety of circumstances so as to reduce the code size and improve efficiency of application program. {\textcopyright} 2011 IEEE.},
author = {Wang, Xiang},
doi = {10.1109/ICIII.2011.104},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/06115063.pdf:pdf},
isbn = {9780769545233},
journal = {Proceedings - 2011 4th International Conference on Information Management, Innovation Management and Industrial Engineering, ICIII 2011},
keywords = {Partition,Quick sort algorithm,Time complexity},
pages = {408--410},
title = {{Analysis of the time complexity of quick sort algorithm}},
volume = {1},
year = {2011}
}
@article{Ferraro-Petrillo2009,
abstract = {We address the problem of sorting in the presence of faults that may arbitrarily corrupt memory locations, and investigate the impact of memory faults both on the correctness and on the running times of mergesort-based algorithms. To achieve this goal, we develop a software testbed that simulates different fault injection strategies, and we perform a thorough experimental study using a combination of several fault parameters. Our experiments give evidence that simple-minded approaches to this problem are largely impractical, while the design of more sophisticated resilient algorithms seems really worth the effort. Another contribution of our computational study is a carefully engineered implementation of a resilient sorting algorithm, which appears robust to different memory fault patterns. {\textcopyright} Springer-Verlag Berlin Heidelberg 2006.},
author = {Ferraro-Petrillo, Umberto and Finocchi, Irene and Italiano, Giuseppe F.},
doi = {10.1007/s00453-008-9264-1},
file = {:Users/leosilva/Documents/Estudo/Doutorado/Coimbra/2019$\backslash$:2020/Disciplinas/ResearchMethods1/Assignment/references/The{\_}Price{\_}of{\_}Resiliency{\_}A{\_}Case{\_}Study{\_}on{\_}Sorting{\_}wi.pdf:pdf},
isbn = {0045300892641},
issn = {01784617},
journal = {Algorithmica (New York)},
keywords = {Computing with unreliable information,Experimental algorithmics,Fault injection,Memory faults,Memory models,Sorting},
number = {4},
pages = {597--620},
title = {{The price of resiliency: A case study on sorting with memory faults}},
volume = {53},
year = {2009}
}
@incollection{Hamdioui2003,
author = {Hamdioui, Said and Al-Ars, Zaid and {Van De Goor}, Ad J. and Rodgers, Mike},
booktitle = {Journal of Electronic Testing: Theory and Applications (JETTA)},
doi = {10.1023/A:1022802010738},
issn = {09238174},
keywords = {Dynamic faults,Fault coverage,Fault models,Fault primitives,Memory tests,Static faults},
number = {2},
pages = {195--205},
title = {{Dynamic faults in random-access-memories: Concept, fault models and tests}},
volume = {19},
year = {2003}
}
